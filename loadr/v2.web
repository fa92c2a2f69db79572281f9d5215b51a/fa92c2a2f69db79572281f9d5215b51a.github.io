<html class="no-js">
<head>
    <script defer src="https://code.getmdl.io/1.3.0/material.min.js"></script>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title></title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="./styles.css">
    <script src="script.js" async defer></script>
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
</head>

<body>
    <!--[if lt IE 7]>
            <p class="browsehappy">You are using an <strong>outdated</strong> browser. Please <a href="#">upgrade your browser</a> to improve your experience.</p>
        <![endif]-->
    <div class="box">
        <div class="large">
            <div class="red card-heading">
                <h1>Effecient</h1>
            </div>
            <div class=card-content>
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras sed massa ornare, tincidunt nulla eget,
                    sollicitudin arcu. Nunc imperdiet libero et neque mollis, eget tempor turpis consequat. Fusce a
                    turpis a justo mattis pulvinar at eu nibh. Nullam euismod dignissim dolor, sit amet luctus nisi
                    ultrices ac. In hac habitasse platea dictumst. Aenean a massa aliquet, congue ante sed, mollis quam.
                    Suspendisse vitae justo ligula. Proin semper, nisi quis condimentum fermentum, sapien lectus
                    venenatis leo, id tincidunt risus orci vel magna.</p>
            </div>
        </div>
        <div class="large">
            <div class="green card-heading">
                <h1>High Speed</h1>
            </div>
            <div class=card-content>
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras sed massa ornare, tincidunt nulla eget,
                    sollicitudin arcu. Nunc imperdiet libero et neque mollis, eget tempor turpis consequat. Fusce a
                    turpis a justo mattis pulvinar at eu nibh. Nullam euismod dignissim dolor, sit amet luctus nisi
                    ultrices ac. In hac habitasse platea dictumst. Aenean a massa aliquet, congue ante sed, mollis quam.
                    Suspendisse vitae justo ligula. Proin semper, nisi quis condimentum fermentum, sapien lectus
                    venenatis leo, id tincidunt risus orci vel magna.</p>
            </div>
        </div>
        <div class="large">
            <div class="blue card-heading">
                <h1>Powerful</h1>
            </div>
            <div class=card-content>
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras sed massa ornare, tincidunt nulla eget,
                    sollicitudin arcu. Nunc imperdiet libero et neque mollis, eget tempor turpis consequat. Fusce a
                    turpis a justo mattis pulvinar at eu nibh. Nullam euismod dignissim dolor, sit amet luctus nisi
                    ultrices ac. In hac habitasse platea dictumst. Aenean a massa aliquet, congue ante sed, mollis quam.
                    Suspendisse vitae justo ligula. Proin semper, nisi quis condimentum fermentum, sapien lectus
                    venenatis leo, id tincidunt risus orci vel magna.</p>
            </div>
        </div>
        <div class="large">
            <div class="purple card-heading">
                <h1>Productive</h1>
            </div>
            <div class=card-content>
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras sed massa ornare, tincidunt nulla eget,
                    sollicitudin arcu. Nunc imperdiet libero et neque mollis, eget tempor turpis consequat. Fusce a
                    turpis a justo mattis pulvinar at eu nibh. Nullam euismod dignissim dolor, sit amet luctus nisi
                    ultrices ac. In hac habitasse platea dictumst. Aenean a massa aliquet, congue ante sed, mollis quam.
                    Suspendisse vitae justo ligula. Proin semper, nisi quis condimentum fermentum, sapien lectus
                    venenatis leo, id tincidunt risus orci vel magna.</p>
            </div>
        </div>
    </div>
</body>

</html>